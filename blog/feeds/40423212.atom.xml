<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Spring 協同產品設計實習 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/40423212.atom.xml" rel="self"></link><id>./</id><updated>2017-05-10T11:00:00+08:00</updated><entry><title>week12</title><link href="./week12.html" rel="alternate"></link><published>2017-05-10T11:00:00+08:00</published><updated>2017-05-10T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-05-10:./week12.html</id><summary type="html">&lt;p&gt;期末協同實習專案規劃與執行

&lt;p&gt;期末協同實習專案規劃與執行,上課時段準備以oral presentation, text presentation,theoretical presentation 逐步朝期末考週 physical presentation的目標邁進。&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;oral presentation:口語說明進度，規劃細節，分工情形，問題討論。&lt;/p&gt;

&lt;p&gt;text presentation:以gh-pages的blog與Fossil SCM 倉儲wiki紀錄每周專題執行情形。 並利用github與Fossil SCM倉儲管理衍生的檔案。&lt;/p&gt;

&lt;p&gt;theoretical presentation:利用Solvespace，Onshape，V-rep，Brython進行評估模擬。&lt;/p&gt;

&lt;p&gt;physical presentation:在期末考周必須完成實體模型製作，並以video影片展示各階段的準備工作與執行結果。&lt;/p&gt;</summary><category term="w12"></category></entry><entry><title>week11</title><link href="./week11.html" rel="alternate"></link><published>2017-05-03T11:00:00+08:00</published><updated>2017-05-03T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-05-03:./week11.html</id><summary type="html">&lt;p&gt;閱讀關於onshape的設計理念，寫出 &lt;a href="https://mde2a2.kmol.info/cdbg2/wcontent"&gt;心得&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;寫出篩選學生數量的py檔&lt;/p&gt;

&lt;p&gt;嘗試利用cango做出正齒輪&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/216657832" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/216657832"&gt;2017-05-09_20-40-55&lt;/a&gt; from &lt;a href="https://vimeo.com/user45523667"&gt;40423212&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;利用 &lt;a href="https://github.com/brython-dev/brython/releases/tag/3.3.1"&gt;Brython 3.3.1&lt;/a&gt; 執行四連桿運動模擬.&lt;/p&gt;
&lt;p&gt;結合 &lt;a href="https://github.com/brython-dev/brython/releases/tag/3.3.1"&gt;Brython 3.3.1&lt;/a&gt; 與 &lt;a href="./../data/w11/cango/Cango-9v05.js"&gt;Cango-9v05.js&lt;/a&gt; 繪圖, 將 &lt;a href="http://www.arc.id.au/CanvasGraphics.html"&gt;Cango Canvas 繪圖範例&lt;/a&gt;轉為 Brython.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.arc.id.au"&gt;Cango 程式庫&lt;/a&gt;&lt;/h3&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="./../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="./../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/Cango-9v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAxes-2v09.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAnimation-5v00.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="cango_canvas" width="800" height="60"&gt;&lt;/canvas&gt;

&lt;div id="cango_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import window
import math
# 利用 window 擷取 Cango 物件, 然後以 new 方法轉為 Brython 物件
cango = window.Cango.new
# 利用 browser 中的 document 擷取 id = "cango_div" 的標註
cango_div = doc["cango_div"]
def sayHullo(cvsID):
    # create a graphics context
    cgo = cango(cvsID) 
    # use RH Cartesian on full canvas
    cgo.setGridboxRHC() 
    # Different X and Y scale
    cgo.setWorldCoords(-10, -5, 20, 10)
    cgo.drawText("以 Cango 顯示中文", {
        'fillColor': "blue",
        'fontSize': 58,
        'lorg':5 })
sayHullo("cango_canvas")
cango_div &lt;= "以 Brython 顯示中文"
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
上述 Cango 與 Brython 文字列印程式碼:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="./../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/Cango-9v05-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAxes-2v09.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAnimation-5v00.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="cango_canvas" width="800" height="60"&gt;&lt;/canvas&gt;
&lt;div id="cango_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import window
import math
# 利用 window 擷取 Cango 物件, 然後以 new 方法轉為 Brython 物件
cango = window.Cango.new
# 利用 browser 中的 document 擷取 id = "cango_div" 的標註
cango_div = doc["cango_div"]
def sayHullo(cvsID):
    # create a graphics context
    cgo = cango(cvsID) 
    # use RH Cartesian on full canvas
    cgo.setGridboxRHC() 
    # Different X and Y scale
    cgo.setWorldCoords(-10, -5, 20, 10)
    cgo.drawText("以 Cango 顯示中文", {
        'fillColor': "blue",
        'fontSize': 58,
        'lorg':5 })
sayHullo("cango_canvas")
cango_div &lt;= "以 Brython 顯示中文"
&lt;/script&gt;
&lt;/pre&gt;

&lt;p&gt;Cango drawPath 範例:&lt;/p&gt;
&lt;canvas id="cango_canvas1" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import window
import math
# 利用 window 擷取 Cango 物件, 然後以 new 方法轉為 Brython 物件
cango = window.Cango.new

def plotSine(cvsID):
    data = []
    g = cango(cvsID)
    g.setGridboxRHC(10, 10, 80, 60)
    g.setWorldCoords(0, -50, 2*math.pi, 100)
    g.drawAxes(0, 6.5, -50, 50, {
    'xOrigin':0, 'yOrigin':0,
    'fontSize':10,
    'strokeColor':'gray'})
    for i in range(int(2*math.pi/0.03)):
        #[0, 0.03, 0.06 ... 3.14159]
        i = i * 0.03
        # 特別注意在 Javascript 採用 data.push(i, 50*math.sin(i)), 但是 Python 必須分為兩段 append
        data.append(i)
        data.append(50*math.sin(i))
    g.drawPath(data, {'strokeColor':'red'})
plotSine("cango_canvas1")
&lt;/script&gt;

&lt;p&gt;以上繪圖程式碼:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;canvas id="cango_canvas1" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import window
import math
# 利用 window 擷取 Cango 物件, 然後以 new 方法轉為 Brython 物件
cango = window.Cango.new

def plotSine(cvsID):
    data = []
    g = cango(cvsID)
    g.setGridboxRHC(10, 10, 80, 60)
    g.setWorldCoords(0, -50, 2*math.pi, 100)
    g.drawAxes(0, 6.5, -50, 50, {
    'xOrigin':0, 'yOrigin':0,
    'fontSize':10,
    'strokeColor':'gray'})
    for i in range(int(2*math.pi/0.03)):
        #[0, 0.03, 0.06 ... 3.14159]
        i = i * 0.03
        # 特別注意在 Javascript 採用 data.push(i, 50*math.sin(i)), 但是 Python 必須分為兩段 append
        data.append(i)
        data.append(50*math.sin(i))
    g.drawPath(data, {'strokeColor':'red'})
plotSine("cango_canvas1")
&lt;/script&gt;
&lt;/pre&gt;

&lt;p&gt;重用 Cango 繪圖物件:&lt;/p&gt;
&lt;canvas id="cango_canvas2" width="800" height="800"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import window
import math
# 利用 window 擷取 Cango 物件, 然後以 new 方法轉為 Brython 物件
cango = window.Cango.new
shape = window.Shape.new
shapedefs = window.shapeDefs

def drawSpiral(cvsID):
    g = cango(cvsID)
    chamber = ['M',289.16,447.14,
                 'C',233.33,399.03, 267.47,290.34, 364.53,265.28,
                     408.88,269.91, 448.14,282.58, 483.22,303.79,
                     391.79,287.12, 292.99,369.50, 331.90,451.11,
                     318.79,447.43, 302.35,446.61, 289.16,447.14, 'z']
    cobj = shape(chamber, {
        'fillColor':"lightyellow",
        'strokeColor':"tan",
        'lineWidthWC':4,
        'border':True })
    cobj.translate(-287, -536)
    g.setGridboxSVG()
    g.setWorldCoords(-250, -320, 500)
    # draw the spiral center dot
    g.drawShape(shapedefs.circle(8), {'fillColor':"tan"})
    # draw the 50 spiral segments
    scale = 1
    for i in range(50):
        scale = scale/1.08
        g.render(cobj, {'scl':scale, 'degs':i*24.5})

drawSpiral("cango_canvas2")
&lt;/script&gt;

&lt;p&gt;上述繪圖程式碼:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;canvas id="cango_canvas2" width="800" height="800"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import window
import math
# 利用 window 擷取 Cango 物件, 然後以 new 方法轉為 Brython 物件
cango = window.Cango.new
shape = window.Shape.new
shapedefs = window.shapeDefs

def drawSpiral(cvsID):
    g = cango(cvsID)
    chamber = ['M',289.16,447.14,
                 'C',233.33,399.03, 267.47,290.34, 364.53,265.28,
                     408.88,269.91, 448.14,282.58, 483.22,303.79,
                     391.79,287.12, 292.99,369.50, 331.90,451.11,
                     318.79,447.43, 302.35,446.61, 289.16,447.14, 'z']
    cobj = shape(chamber, {
        'fillColor':"lightyellow",
        'strokeColor':"tan",
        'lineWidthWC':4,
        'border':True })
    cobj.translate(-287, -536)
    g.setGridboxSVG()
    g.setWorldCoords(-250, -320, 500)
    # draw the spiral center dot
    g.drawShape(shapedefs.circle(8), {'fillColor':"tan"})
    # draw the 50 spiral segments
    scale = 1
    for i in range(50):
        scale = scale/1.08
        g.render(cobj, {'scl':scale, 'degs':i*24.5})

drawSpiral("cango_canvas2")
&lt;/script&gt;
&lt;/pre&gt;

&lt;p&gt;目前正透過 &lt;a href="https://github.com/mdecourse/kmol2018"&gt;https://github.com/mdecourse/kmol2018&lt;/a&gt; 測試 Windows 64 位元可攜 Python3.6.1 與 Brython 3.3.1 的應用, 已經發現 Pelican DISPLAY_PAGES_ON_MENU 無法運作, 且 Brython 3.3.1 在 Windows 環境中無法正確擷取字串值.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://snapsvg.io/"&gt;Snap 程式庫&lt;/a&gt;&lt;/h3&gt;
&lt;script type="text/javascript" src="./../data/w11/snap/snap.svg-min.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;svg id="svgout" width="800" height="500" viewBox="0 0 800 500"&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;script type="text/python"&gt;
from browser import alert
from browser import window, document
# 將 Snap 轉為 Brython 物件
snap = window.Snap.new
# 使用 id 為 "svgout" 的 svg 標註進行繪圖
s = snap("#svgout")

offsetY = 50

# 是否標示出繪圖範圍
#borderRect = s.rect(0,0,800,640,10,10).attr({ 'stroke': "silver", 'fill': "silver", 'strokeWidth': "3" })

g = s.group().transform('t250,120')
r0 = s.rect(150,150,100,100,20,20).attr({ 'fill': "orange", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c0 = s.circle(225,225,10).attr({ 'fill': "silver", 'stroke': "black", 'strokeWidth': "4"  }).attr({ 'id': 'c0' })
g0 = s.group( r0,c0 ).attr({ 'id': 'g0' })
#g0.animate({ 'transform' : 't250,120r360,225,225' },4000)
g0.appendTo( g )
g0.animate({ 'transform' : 'r360,225,225' },4000)
# 讓 g0 可以拖動
g0.drag()

r1 = s.rect(100,100,100,100,20,20).attr({ 'fill': "red", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c1 = s.circle(175,175,10).attr({ 'fill': "silver", 'stroke': "black" , 'strokeWidth': "4"}).attr({ 'id': 'c1' })
g1 = s.group( r1,c1 ).attr({ 'id': 'g1' })
g1.appendTo( g0 ).attr({ 'id': 'g1' })
g1.animate({ 'transform' : 'r360,175,175' },4000)

r2 = s.rect(50,50,100,100,20,20).attr({ 'fill': "blue", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c2 = s.circle(125,125,10).attr({ 'fill': "silver", 'stroke': "black", 'strokeWidth': "4" }).attr({ 'id': 'c2' })
g2 = s.group(r2,c2).attr({ 'id': 'g2' })

g2.appendTo( g1 );
g2.animate( { 'transform' : 'r360,125,125' },4000);

r3 = s.rect(0,0,100,100,20,20).attr({ 'fill': "yellow", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c3 = s.circle(75,75,10).attr({ 'fill': "silver", 'stroke': "black", 'strokeWidth': "4" }).attr({ 'id': 'c3' })
g3 = s.group(r3,c3).attr({ 'id': 'g3' })

g3.appendTo( g2 )
g3.animate( { 'transform' : 'r360,75,75' },4000)

r4 = s.rect(-50,-50,100,100,20,20).attr({ 'fill': "green", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c4 = s.circle(25,25,10).attr({ 'fill': "silver", 'stroke': "black", 'strokeWidth': "4" }).attr({ 'id': 'c4' })
g4 = s.group(r4,c4).attr({ 'id': 'g4' });
g4.appendTo( g3 )
g4.animate( { 'transform' : 'r360,25,25' },4000)
&lt;/script&gt;

&lt;p&gt;上述 Snap 繪圖程式碼:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;script type="text/javascript" src="./../data/w11/snap/snap.svg-min.js"&gt;&lt;/script&gt;

&lt;svg id="svgout" width="800" height="500" viewBox="0 0 800 500"&gt;&lt;/svg&gt;

&lt;script type="text/python"&gt;
from browser import alert
from browser import window, document
# 將 Snap 轉為 Brython 物件
snap = window.Snap.new
# 使用 id 為 "svgout" 的 svg 標註進行繪圖
s = snap("#svgout")

offsetY = 50

# 是否標示出繪圖範圍
#borderRect = s.rect(0,0,800,640,10,10).attr({ 'stroke': "silver", 'fill': "silver", 'strokeWidth': "3" })

g = s.group().transform('t250,120')
r0 = s.rect(150,150,100,100,20,20).attr({ 'fill': "orange", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c0 = s.circle(225,225,10).attr({ 'fill': "silver", 'stroke': "black", 'strokeWidth': "4"  }).attr({ 'id': 'c0' })
g0 = s.group( r0,c0 ).attr({ 'id': 'g0' })
#g0.animate({ 'transform' : 't250,120r360,225,225' },4000)
g0.appendTo( g )
g0.animate({ 'transform' : 'r360,225,225' },4000)
# 讓 g0 可以拖動
g0.drag()

r1 = s.rect(100,100,100,100,20,20).attr({ 'fill': "red", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c1 = s.circle(175,175,10).attr({ 'fill': "silver", 'stroke': "black" , 'strokeWidth': "4"}).attr({ 'id': 'c1' })
g1 = s.group( r1,c1 ).attr({ 'id': 'g1' })
g1.appendTo( g0 ).attr({ 'id': 'g1' })
g1.animate({ 'transform' : 'r360,175,175' },4000)

r2 = s.rect(50,50,100,100,20,20).attr({ 'fill': "blue", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c2 = s.circle(125,125,10).attr({ 'fill': "silver", 'stroke': "black", 'strokeWidth': "4" }).attr({ 'id': 'c2' })
g2 = s.group(r2,c2).attr({ 'id': 'g2' })

g2.appendTo( g1 );
g2.animate( { 'transform' : 'r360,125,125' },4000);

r3 = s.rect(0,0,100,100,20,20).attr({ 'fill': "yellow", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c3 = s.circle(75,75,10).attr({ 'fill': "silver", 'stroke': "black", 'strokeWidth': "4" }).attr({ 'id': 'c3' })
g3 = s.group(r3,c3).attr({ 'id': 'g3' })

g3.appendTo( g2 )
g3.animate( { 'transform' : 'r360,75,75' },4000)

r4 = s.rect(-50,-50,100,100,20,20).attr({ 'fill': "green", 'opacity': "0.8", 'stroke': "black", 'strokeWidth': "2" })
c4 = s.circle(25,25,10).attr({ 'fill': "silver", 'stroke': "black", 'strokeWidth': "4" }).attr({ 'id': 'c4' })
g4 = s.group(r4,c4).attr({ 'id': 'g4' });
g4.appendTo( g3 )
g4.animate( { 'transform' : 'r360,25,25' },4000)
&lt;/script&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;svg id="svgout1" width="800" height="500" viewBox="0 0 800 500"&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;script type="text/python"&gt;
from browser import window
from browser import document
# 將 Snap 轉為 Brython 物件
snap = window.Snap.new

s = snap("#svgout1")
# 建立物件時, 同時設定 id 名稱
r = s.rect(10,10,100,100).attr({'id': 'rect'})
c = s.circle(100,100,50).attr({'id': 'circle'})
r.attr('fill', 'red')
c.attr({ 'fill': 'blue', 'stroke': 'black', 'strokeWidth': 10 })
r.attr({ 'stroke': '#123456', 'strokeWidth': 20 })
s.text(180,100, '點按一下圖形').attr({'fill' : 'blue',  'stroke': 'blue', 'stroke-width': 0.2 })

g = s.group().attr({'id': 'tux'})

def hoverover(ev):
    g.animate({'transform': 's1.2r45,t180,20'}, 1000, window.mina.bounce)

def hoverout(ev):
    g.animate({'transform': 's1r0,t180,20'}, 1000, window.mina.bounce) 

# callback 函式
def onSVGLoaded(data):
    #s.append(data)
    g.append(data)
    #g.hover(hoverover, hoverout )
    g.text(300,100, '將滑鼠指向企鵝')

# 利用 window.Snap.load 載入 svg 檔案
tux = window.Snap.load("https://chiamingyen.github.io/kmolab_data/files/Dreaming_tux.svg", onSVGLoaded)
g.transform('t180,20')

# 與視窗事件對應的函式
def rtoyellow(ev):
    r.attr('fill', 'yellow')

def ctogreen(ev):
    c.attr('fill', 'green')

# 根據物件 id 綁定滑鼠事件執行對應函式
document['rect'].bind('click', rtoyellow)
document['circle'].bind('click', ctogreen)
document['tux'].bind('mouseover', hoverover)
document['tux'].bind('mouseleave', hoverout)
&lt;/script&gt;

&lt;p&gt;上述繪圖程式碼:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;svg id="svgout1" width="800" height="500" viewBox="0 0 800 500"&gt;&lt;/svg&gt;

&lt;script type="text/python"&gt;
from browser import window
from browser import document
# 將 Snap 轉為 Brython 物件
snap = window.Snap.new

s = snap("#svgout1")
# 建立物件時, 同時設定 id 名稱
r = s.rect(10,10,100,100).attr({'id': 'rect'})
c = s.circle(100,100,50).attr({'id': 'circle'})
r.attr('fill', 'red')
c.attr({ 'fill': 'blue', 'stroke': 'black', 'strokeWidth': 10 })
r.attr({ 'stroke': '#123456', 'strokeWidth': 20 })
s.text(180,100, '點按一下圖形').attr({'fill' : 'blue',  'stroke': 'blue', 'stroke-width': 0.2 })

g = s.group().attr({'id': 'tux'})

def hoverover(ev):
    g.animate({'transform': 's1.2r45,t180,20'}, 1000, window.mina.bounce)

def hoverout(ev):
    g.animate({'transform': 's1r0,t180,20'}, 1000, window.mina.bounce) 

# callback 函式
def onSVGLoaded(data):
    #s.append(data)
    g.append(data)
    #g.hover(hoverover, hoverout )
    g.text(300,100, '將滑鼠指向企鵝')

# 利用 window.Snap.load 載入 svg 檔案
tux = window.Snap.load("https://chiamingyen.github.io/kmolab_data/files/Dreaming_tux.svg", onSVGLoaded)
g.transform('t180,20')

# 與視窗事件對應的函式
def rtoyellow(ev):
    r.attr('fill', 'yellow')

def ctogreen(ev):
    c.attr('fill', 'green')

# 根據物件 id 綁定滑鼠事件執行對應函式
document['rect'].bind('click', rtoyellow)
document['circle'].bind('click', ctogreen)
document['tux'].bind('mouseover', hoverover)
document['tux'].bind('mouseleave', hoverout)
&lt;/script&gt;
&lt;/pre&gt;

&lt;p&gt;Other SVG library: &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/duopixel/Method-Draw"&gt;https://github.com/duopixel/Method-Draw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mozman/svgwrite"&gt;https://github.com/mozman/svgwrite&lt;/a&gt;&lt;/p&gt;</summary><category term="w11"></category></entry><entry><title>week7</title><link href="./week7.html" rel="alternate"></link><published>2017-04-05T11:00:00+08:00</published><updated>2017-04-05T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-04-05:./week7.html</id><summary type="html">&lt;p&gt;往fossil傳遞檔案，以及onshape參數繪圖
&lt;/p&gt;
&lt;p&gt;Part1.&lt;/p&gt;
&lt;p&gt;全自動的 start.bat&lt;/p&gt;
&lt;p&gt;近端的 fossil SCM + stunnel&lt;/p&gt;
&lt;p&gt;W7 起將要利用FOSSIL進行文字檔設計資料的版次管理.&lt;/p&gt;
&lt;p&gt;協同產品設計課程有哪些文字檔案設計資料？&lt;/p&gt;
&lt;p&gt;.py&lt;/p&gt;
&lt;p&gt;.md&lt;/p&gt;
&lt;p&gt;.bat&lt;/p&gt;
&lt;p&gt;reveal 與 pelican 的設計檔案&lt;/p&gt;
&lt;p&gt;Part2.&lt;/p&gt;
&lt;p&gt;Solvespace , Onshape 的 one-link , fore-bar , eight-bar零件組圖，轉入V-rep 進行速度控制(動畫模擬)&lt;/p&gt;
&lt;p&gt;將stl零組件展示在分組網誌，能否多stl零組件集中在一個 html業面，協同？&lt;/p&gt;
&lt;p&gt;Part3.&lt;/p&gt;
&lt;p&gt;期中報告與自評&lt;/p&gt;
&lt;p&gt;Part_X1.&lt;/p&gt;
&lt;p&gt;Onshape Part Studio 建立教學，零件參數管理建立。&lt;/p&gt;
&lt;p&gt;Onshape 零組件轉出 stl 檔為定位方便，軸與孔不可以理想完整配合。 須留餘隙，否則在轉出 stl 檔時將會將會與孔干涉，導致孔與軸疊合為一零件。&lt;/p&gt;
&lt;p&gt;圓柱體總高不可小於或者等於直徑，導入 V-rep 會無法辨識其為柱狀零件(軸)。V-rep 其便是軸為抓取零件之長寬比。&lt;/p&gt;
&lt;p&gt;Part_X2.&lt;/p&gt;
&lt;p&gt;sqlite3.exe 工具&lt;/p&gt;
&lt;p&gt;sqlite vcp.fossil&lt;/p&gt;
&lt;p&gt;log in&lt;/p&gt;
&lt;p&gt;pw&lt;/p&gt;
&lt;p&gt;cap
.schema user
select login,pw cap from user
更改user ps(password)&lt;/p&gt;
&lt;p&gt;update user set up ='s' where login='****';
Part_X3.&lt;/p&gt;
&lt;p&gt;fossil clone uri vcp.fossil(Filename)&lt;/p&gt;
&lt;p&gt;fossil open ./ ../ ../vcp.fossil&lt;/p&gt;
&lt;p&gt;進行改版&lt;/p&gt;
&lt;p&gt;fossil add.&lt;/p&gt;
&lt;p&gt;fossil remote -url off&lt;/p&gt;
&lt;p&gt;fossil commit -m "commit messenge"&lt;/p&gt;
&lt;p&gt;fossil push https://user@192.168.&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;
&lt;p&gt;key-in user passeword to complete push&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/212731781" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/212731781"&gt;2017-04-11_19-51-04 w7 40423212&lt;/a&gt; from &lt;a href="https://vimeo.com/user45523667"&gt;40423212&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="w7"></category></entry><entry><title>week6</title><link href="./week6.html" rel="alternate"></link><published>2017-03-23T11:00:00+08:00</published><updated>2017-03-23T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-03-23:./week6.html</id><summary type="html">&lt;p&gt;準備期中驗收
&lt;/p&gt;
&lt;p&gt;完成其他組件的v-rep做動模擬&lt;/p&gt;

&lt;p&gt;完成課程遺漏部分，便於下週進行自評&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/211496479" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/211496479"&gt;2017-04-04_23-26-45 40423212_w6&lt;/a&gt; from &lt;a href="https://vimeo.com/user45523667"&gt;40423212&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="w6"></category></entry><entry><title>week5</title><link href="./week5.html" rel="alternate"></link><published>2017-03-22T11:00:00+08:00</published><updated>2017-03-22T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-03-22:./week5.html</id><summary type="html">&lt;p&gt;fossil wiki首頁的使用及使one-link bar轉動
&lt;/p&gt;
&lt;p&gt;建立一個與project name同名的wiki，該wiki會成為首頁&lt;/p&gt;

&lt;p&gt;認識fossil wiki的三種編譯方式-Fossil wiki，Markdown 以及Plain text&lt;/p&gt;

&lt;p&gt;嘗試利用V-rep使solvespace做出的one-link bar，利用triangle mesh存檔後進行旋轉做動&lt;/p&gt;

&lt;p&gt;做好one link bar 之後要利用export triangle mesh存成stl檔，在V-REP用inport打開此檔案，之後用edit&gt;grouping/merging&gt;divide selected shapes進行分解&lt;/p&gt;

&lt;p&gt;將軸放至底部的子目錄，再將上蓋放置軸的子目錄進行固定，最後將軸變成馬達，即可讓簡易的one-link bar進行轉動&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/210402905" width="640" height="333" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/210402905"&gt;2017-03-28_18-30-41 40423212_hw5&lt;/a&gt; from &lt;a href="https://vimeo.com/user45523667"&gt;40423212&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="w5"></category></entry><entry><title>week4</title><link href="./week4.html" rel="alternate"></link><published>2017-03-20T11:00:00+08:00</published><updated>2017-03-20T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-03-20:./week4.html</id><summary type="html">&lt;p&gt;運營fossil製程的wiki

&lt;p&gt;使用老師建立的新fossil，獲得管理權後加入其他組員&lt;/p&gt;
&lt;p&gt;介紹altair的應力分析&lt;/p&gt;
&lt;p&gt;認識Xming X-windows vnc remote desktop&lt;/p&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/209206357" width="640" height="333" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209206357"&gt;2017-03-20_22-26-25 40423212﹍w4&lt;/a&gt; from &lt;a href="https://vimeo.com/user45523667"&gt;40423212&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="w4"></category></entry><entry><title>week3</title><link href="./week3.html" rel="alternate"></link><published>2017-03-07T11:00:00+08:00</published><updated>2017-03-07T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-03-07:./week3.html</id><summary type="html">&lt;p&gt;介紹Altair及製作近端fossil

&lt;p&gt;從 https://mde2al.kmol.info 進入新區域的wiki檢視每周進度&lt;/p&gt;
&lt;p&gt;了解Altair的soildthinking&lt;/p&gt;
&lt;p&gt;認識Altair的特色，其中包括檢測受力.受熱.流力.最小化資源利用.較為人性的快捷列&lt;/p&gt;
&lt;p&gt;更改start的fossil路徑並且建立自己的近端fossil帳號密碼&lt;/p&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/208333078" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/208333078"&gt;2017-03-10_40423212_w3&lt;/a&gt; from &lt;a href="https://vimeo.com/user45523667"&gt;40423212&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="w3"></category></entry><entry><title>week2</title><link href="./week2.html" rel="alternate"></link><published>2017-03-01T11:00:00+08:00</published><updated>2017-03-01T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-03-01:./week2.html</id><summary type="html">&lt;p&gt;使用py進行有效率的分組

&lt;p&gt;使用ethercalc製作簡易的分組表格&lt;/p&gt;
&lt;p&gt;認識cp950(大五碼)&lt;/p&gt;
&lt;p&gt;使用py建立分組程序，並且挑出未被分類的學生&lt;/p&gt;
&lt;p&gt;製作簡易連桿組&lt;/p&gt;
&lt;p&gt;了解vrep起始抓點，在做stl檔的時候原點需跟物件拉開一定距離&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/206248051" width="640" height="443" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/206248051"&gt;2017-03-02 40423212 w2&lt;/a&gt; from &lt;a href="https://vimeo.com/user45523667"&gt;40423212&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;</summary><category term="w2"></category></entry><entry><title>week1</title><link href="./week1.html" rel="alternate"></link><published>2017-02-24T11:00:00+08:00</published><updated>2017-02-24T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:,2017-02-24:./week1.html</id><summary type="html">&lt;p&gt;介紹課程大綱

&lt;p&gt;了解Blender 3dstudio maya之相關性&lt;/p&gt;
&lt;p&gt;stunnel 的使用 http的proxy&lt;/p&gt;
&lt;p&gt;在py語言中,;(分號)=註解&lt;/p&gt;
&lt;p&gt;簡略介紹c語言與py的優劣與使用時機&lt;/p&gt;
&lt;p&gt;利用cmd輸出ipconfig /all 查詢ip後&lt;/p&gt;
&lt;p&gt;至stunnel&amp;gt;config&amp;gt;stunnel.conf\,利用Scite找到http字串修改其ip&lt;/p&gt;
&lt;p&gt;進入例如https://192.168.1.24/2017springvcp_hw/index 的協同區域,並且嘗試以anonymous（無名氏/遊客）的身份進入&lt;/p&gt;
&lt;p&gt;利用vrep配合Scite打開的ttt檔完成做動模擬&lt;/p&gt;&lt;/p&gt;</summary><category term="w1"></category></entry></feed>